MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes, file = "";
		
	RAM:        start = $0320, size = $03E0, define = yes, file = "";
    C_STACK:    start = $0300, size = $0020, define = yes, file = "";
	OAM_BUF:    start = $0200, size = $0100, define = yes, file = "";
    PAL_BUF:    start = $01C0, size = $0040, define = yes, file = "";
    VRAM_BUF:   start = $0700, size = $0100, define = yes, file = "";

    WRAM:       start = $6000, size = $2000, define = yes, file = "";

#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;


#ROM Addresses:
    ROM_M_00: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $00;
    ROM_M_01: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $01;
    ROM_M_02: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $02;
    ROM_M_03: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $03;
    ROM_M_04: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $04;
    ROM_M_05: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $05;
    ROM_M_06: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $06;
    ROM_M_07: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $07;
    ROM_M_08: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $08;
    ROM_M_09: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $09;
    ROM_M_0A: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $0a;
    ROM_M_0B: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $0b;
    ROM_M_0C: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $0c;
    ROM_M_0D: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $0d;
    # MMC3 uses exclusively 8kb banks, so we have to break up the 16kb of fixed storage, too.
    PRG:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $00;
    PRG_2:  start = $e000, size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
}




SEGMENTS {
    HEADER:   load = HEADER, type = ro, define = yes;
    IRQ_T:    load = WRAM,   type = bss, start = $7FC0, define = yes;
    # Banks for mmc3 are split into two groups: 
    # A: The first 8kb section in memory
    # B: The second 8kb section in memory.
    # You can only put banks from section A into the first memory bank, and banks from section B into the second.
    levels_00:   load = ROM_M_00, type = ro, optional = yes;
    levels_01:   load = ROM_M_01, type = ro, optional = yes;
    levels_02:   load = ROM_M_02, type = ro, optional = yes;
    levels_03:   load = ROM_M_03, type = ro, optional = yes;
    levels_04:   load = ROM_M_04, type = ro, optional = yes;
    levels_05:   load = ROM_M_05, type = ro, optional = yes;
    levels_06:   load = ROM_M_06, type = ro, optional = yes;
    levels_07:   load = ROM_M_07, type = ro, optional = yes;
    graphics_00:   load = ROM_M_08, type = ro, optional = yes;
    graphics_01:   load = ROM_M_09, type = ro, optional = yes;
    music_00:   load = ROM_M_0A, type = ro, optional = yes;
    dmc_00:   load = ROM_M_0B, type = ro, optional = yes;
    dmc_01:   load = ROM_M_0C, type = ro, optional = yes;
    dmc_02:   load = ROM_M_0D, type = ro, optional = yes;
    
    # Fixed banks
    CODE:     load = PRG, type = ro, define = yes, optional = yes;
    RODATA:   load = PRG, type = ro, define = yes, optional = yes;
    STARTUP:  load = PRG_2, type = ro, define = yes;
    NESLIB:   load = PRG_2, type = ro, define = yes;
    NESDOUG:  load = PRG_2, type = ro, define = yes;
	SND_DRV:  load = PRG_2, type = ro, define = yes;
    CODE_2:   load = PRG_2, type = ro, define = yes, optional = yes;
    RODATA_2: load = PRG_2, type = ro, define = yes, optional = yes;
	VECTORS:  load = PRG_2, start = $fffa, type = ro;
    
    BSS:      load = RAM,            type = bss, define = yes;
    ZEROPAGE: load = ZP,             type = zp;
	
}




#removed CONDES features




SYMBOLS {
    MAPPER:         type = weak, value = 268;     # 4 = MMC3
    SUBMAPPER:      type = weak, value = 0;     # Standard
    MIRRORING:      type = weak, value = 8;     # 0, 1 = doesn't matter (its an MMC3 register), 8 = hardwired 4-screen 
    PRG_BANK_COUNT: type = weak, value = 32;    # 16k PRG chunk count
    CHR_BANK_COUNT: type = weak, value = 0;    # 8k CHR chunk count
    SRAM:           type = weak, value = 1;     # 1 = battery backed SRAM at $6000-7FFF
    TRAINER:        type = weak, value = 0;     # unneeded
    CONSOLE_TYPE:   type = weak, value = 0;     # Standard NES/Famicom
    PRG_RAM_COUNT:  type = weak, value = 0;     # None (it's all non-volatile)
    PRG_NVRAM_COUNT:type = weak, value = 7;     # 64 << 7 = 8K
    CHR_RAM_COUNT:  type = weak, value = 8;     # None
    CHR_NVRAM_COUNT:type = weak, value = 0;     # 
    CPU_PPU_TIMING: type = weak, value = 2;     # Multiregion
    HARDWARE_TYPE:  type = weak, value = 0;     # Unused
    MISC_ROMS:      type = weak, value = 0;     # No misc ROMs
    DEF_EXP_DEVICE: type = weak, value = 0;     # Unspecified

    FIRST_MUSIC_BANK:   type = weak, value = $32;
}

